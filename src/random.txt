

Code picked from the Female/page.tsx file

import { client } from "@/lib1/sanityClient";

export const getProductData = async () => {
  const res = await client.fetch(`*[_type=='product']{
    title
  }`);
  return res;
};

const page = async () => {
  interface IProducts {
    title: "string";
    description: "string";
  }
  const data: IProducts[] = await getProductData();
  const displayData = data.map((item) => <h1>{item.title}</h1>);
  console.log(data);
  return (
    <div className="bg-white min-h-screen w-full grid place-content-center">
      <div className="max-w-7xl min-h-screen p-4 bg-slate-200 flex space-x-10 items-center flex-wrap">
        {displayData}
      </div>
    </div>
  );
};

export default page;



The followind code lines are from the Products Page where I hardcoded the display of Products from each Category. Now I have replaced that hardcode with a component by the name of DisplayProducts.

   {/* <Image
                  src={urlForImage(item.image).url()}
                  alt="product"
                  width={imgWidth}
                  height={imgHeight}
                />
                <h1 className="font-medium" key={i}>
                  {item.title}
                </h1> */}

  this code is from the Jewllery sectiion
  where I am trying to have some text in the background

  <div className="md:w-1/2 bg-zinc-50 relative">
        <h1 className="p-4 text-9xl text-black opacity-100 font-semibold mix-blend-overlay">
          Different From Others
        </h1>
        {/* <div className="p-8 grid grid-cols-[repeat(2,auto)] gap-x-4 gap-y-4">
          <div className="flex flex-col justify-between">
            <h2 className="text-lg font-bold text-zinc-900">
              Using Good Quality Materials
            </h2>
            <p>Lorem ipsum dolor sit amt, consectetur adipiscing elit.</p>
          </div>
          <div className="flex flex-col justify-between">
            <h2 className="text-lg font-bold text-zinc-900">
              100% HandMade Products
            </h2>
            <p>Lorem ipsum dolor sit amt, consectetur adipiscing elit.</p>
          </div>
          <div className="flex flex-col justify-between">
            <h2 className="text-lg font-bold text-zinc-800">
              Modern Fashin Design
            </h2>
            <p>Lorem ipsum dolor sit amt, consectetur adipiscing elit.</p>
          </div>
          <div className="flex flex-col justify-between">
            <h2 className="text-lg font-bold text-zinc-900">
              Discount on Bulk Orders
            </h2>
            <p>Lorem ipsum dolor sit amt, consectetur adipiscing elit.</p>
          </div>
        </div> */}

        Some code from cartdisplay.tsx file:

         // <div className="bg-yellow-300 max-w-7xl mx-auto grid grid-cols-[repeat(3,auto)] gap-28 items-center">
    //   <div className="col-span-2 flex items-center justify-start">
    //     <Image
    //       className="hover:scale-105 duration-300"
    //       src={urlForImage(cartItem[0].image).url()}
    //       alt="product"
    //       width={150}
    //       height={100}
    //     />
    //     <div>
    //       {" "}
    //       <h2 className="text-xl text-zinc-900 font-medium">
    //         {cartItem[0].title}
    //       </h2>
    //     </div>
    //   </div>

    //   <div>
    //     <h3 className="text-zinc-900 font-medium text-lg">
    //       ${cartItem[0].price.toFixed()}
    //     </h3>
    //   </div>
    // </div>








    This is the CartState.tsx file before making the useReducer changes:


    "use client";
import CartContext from "./cartContext";
import { useState, ReactNode } from "react";
import { POST } from "../api/cart/route";

interface cartStateProps {
  children: ReactNode;
}

const CartState = ({ children }: cartStateProps) => {
  const [Quantity, setQuantity] = useState(1);

  const IncreaseQuantity = () => {
    setQuantity(Quantity + 1);
  };

  const DecreaseQuantity = () => {
    setQuantity(Quantity - 1);
  };

  const addToCart = async (_id: string) => {
    const res = await fetch("/api/cart", {
      method: "POST",
      body: JSON.stringify({
        product_id: _id,
        quantity: Quantity,
      }),
    });
    const result = await res.json();
    console.log(`Here is the data: `);
    console.log(result);
  };

  return (
    <CartContext.Provider
      value={{ Quantity, IncreaseQuantity, DecreaseQuantity, addToCart }}>
      {children}
    </CartContext.Provider>
  );
};

export default CartState;

what do I do now?




underneath is the entire product detail file


"use client";
import React from "react";
import { client } from "@/lib1/sanityClient";
import Image from "next/image";
import { Image as IImage } from "sanity";
import { urlForImage } from "../../../../sanity/lib/image";
//import { pid } from "process";
//import { useSelector, useDispatch } from "react-redux";
//import cartSlice, { cartActions } from "@/app/store/slice/cartSlice";
//import { RootState } from "@/app/store/store";
import { useState } from "react";
//import Quantity from "../Quantity";

interface ProductDetails {
  title: string;
  price: number;
  _id: string;
  image: IImage;
  category: { name: string };
  producttype: { name: string };
}

const page = async ({ params }: { params: { id: string } }) => {
  const [Q, setQ] = useState(1);
  // const increaseQ = () => {
  //   setQ((prev) => prev + 1);
  // };
  // const decreaseQ = () => {
  //   setQ((prev) => prev - 1);
  // };
  console.log(`parent:`, Q);
  const pid = params.id;
  // const itemQuantity = useSelector(
  //   (state: RootState) => state.cartSlice.item_quantity
  // );

  //const dispatch = useDispatch();

  const addToCart = () => {
    //   dispatch(cartActions.addToCart({ pid: pid, itemQuantity: Q }));
  };

  const query = `*[_type == 'product' && _id == $pid]{title,price,image,category->{name}, producttype ->{ name }}`;
  //This is where the data is being fetched from the api
  const data: ProductDetails[] = await client.fetch(query, { pid: params.id });
  // console.log(data);
  // Defining the sizes
  const sizes: string[] = ["XS", "S", "M", "L", "XL"];

  return (
    <div className="min-h-screen max-w-7xl mx-auto grid place-content-center">
      <div className="w-full flex items-start justify-between">
        <div>
          <Image
            className="hover:scale-105 duration-300"
            src={urlForImage(data[0].image).url()}
            alt="product"
            width={500}
            height={600}
          />
        </div>

        {data.map((item) => (
          <div className="w-[500px] h-[600px]  flex flex-col items-start space-y-12">
            <div className="ml-20">
              <h1 className="text-3xl text-zinc-900 font-semibold">
                {item.title}
              </h1>
              <p className="font-semibold text-xl text-gray-400">
                {/* {item.category.name} */}
                {item.producttype.name}
              </p>
            </div>
            <div className="ml-20 flex flex-col space-y-4">
              <h3 className="font-semibold text-lg">Select Size</h3>
              <div className="flex items-center">
                {sizes.map((size, i) => (
                  <span
                    className="w-8 h-8 rounded-full grid place-content-center font-semibold text-center text-gray-500 p-6 mr-4 hover:shadow-lg hover:bg-slate-200"
                    key={i}>
                    {size}
                  </span>
                ))}
              </div>
              {/* <Quantity Q1={Q} increaseQ1={increaseQ} decreaseQ1={decreaseQ} /> */}
              {/*Qunatity Component written here */}

              <div className="flex items-center gap-x-10">
                <p>Quantity : </p>
                <div className="flex items-center gap-x-4">
                  <button
                    onClick={() => {
                      setQ((prev) => prev - 1);
                    }}
                    className="bg-zinc-800 text-zinc-50 px-2 py-1 rounded-md shadow-md">
                    -
                  </button>

                  <p>{Q}</p>

                  <button
                    onClick={() => {
                      setQ((prev) => prev + 1);
                    }}
                    className="bg-zinc-800 text-zinc-50 px-2 py-1 rounded-md shadow-md">
                    +
                  </button>
                </div>
              </div>
              {/*Quantity Component ends here*/}
            </div>

            <p className="font-semibold text-xl ml-20">
              ${item.price.toFixed(2)}
            </p>
            <div>
              <button
                onClick={addToCart}
                className="px-8 py-4 ml-20 bg-zinc-900 text-zinc-50 text-sm rounded-sm hover:scale-105">
                {" "}
                Add to Cart
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default page;
